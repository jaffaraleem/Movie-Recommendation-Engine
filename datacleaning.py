# -*- coding: utf-8 -*-
"""DataCleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OTWVm-Rb14wuYNECtRAmRdc-0NlAXOGi
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from ast import literal_eval


def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan


# Data file paths
METADATA_PATH = '/content/drive/MyDrive/Colab Notebooks/ee541/Project/Data/movies_metadata.csv'
CREDITS_PATH = '/content/drive/MyDrive/Colab Notebooks/ee541/Project/Data/credits.csv'

metadata_df = pd.read_csv(METADATA_PATH)
credits_df = pd.read_csv(CREDITS_PATH)

metadata_df = metadata_df.drop(['homepage', 'imdb_id', 'original_title', 'status', 'tagline',
                               'video', 'title', 'spoken_languages', 'production_countries', 'poster_path'], axis=1)

metadata_df = metadata_df.loc[metadata_df.adult.isin(['True', 'False']), :]

metadata_df['id'] = metadata_df['id'].astype('int')
credits_df['id'] = credits_df['id'].astype('int')
metadata_df = metadata_df.merge(credits_df, on='id')

metadata_df['crew'] = metadata_df['crew'].apply(literal_eval)
metadata_df['cast'] = metadata_df['cast'].apply(literal_eval)
metadata_df['genres'] = metadata_df['genres'].apply(literal_eval)

metadata_df['director'] = metadata_df['crew'].apply(get_director)
metadata_df['cast'] = metadata_df['cast'].apply(
    lambda x: [i['name'] for i in x] if isinstance(x, list) else [])
metadata_df['cast'] = metadata_df['cast'].apply(
    lambda x: x[:5] if len(x) >= 5 else x)
metadata_df['genres'] = metadata_df['genres'].apply(
    lambda x: [i['name'] for i in x] if isinstance(x, list) else [])

metadata_df['budget'] = metadata_df['budget'].astype('int')
mean_budget = metadata_df['budget'].mean()
metadata_df['budget'] = metadata_df['budget'].replace(0, mean_budget)

metadata_df['revenue'] = metadata_df['revenue'].replace(np.NaN, 0)
metadata_df['revenue'] = metadata_df['revenue'].astype('int')
mean_revenue = metadata_df['revenue'].mean()
metadata_df['revenue'] = metadata_df['revenue'].replace(0, mean_revenue)

metadata_df['belongs_to_collection'] = metadata_df['belongs_to_collection'].replace(
    np.NaN, "{'id':0}")
metadata_df['belongs_to_collection'] = metadata_df['belongs_to_collection'].apply(
    literal_eval)
metadata_df['belongs_to_collection'] = metadata_df['belongs_to_collection'].apply(
    lambda x: x['id'] if isinstance(x, dict) else [])

collection_set = set(metadata_df['belongs_to_collection'].unique().tolist())
metadata_df['belongs_to_collection'].astype('int')
iter_list = iter(list(set(range(0, 480160))-collection_set))
metadata_df['belongs_to_collection'] = metadata_df['belongs_to_collection'].apply(
    lambda x: next(iter_list) if x == 0 else x)

metadata_df = metadata_df.drop(['production_companies', 'crew'], axis=1)

# dropped 1 example from runtime, 1 from overview, 11 from language, 87 from date
metadata_df_filtered = metadata_df.dropna(
    subset=['original_language', 'release_date', 'runtime', 'overview'])

print(metadata_df_filtered.shape)

for cols in metadata_df_filtered:
    x = metadata_df_filtered[cols].isnull().value_counts()
    print(x)
